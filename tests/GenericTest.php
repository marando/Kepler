<?php

namespace Marando\AstroCoord;

use \Marando\AstroDate\AstroDate;
use \Marando\Kepler\Planets\Earth;
use \Marando\Kepler\Planets\Mercury;
use \Marando\Kepler\Planets\Moon;
use \Marando\Kepler\Planets\Pluto;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-03 at 01:14:00.
 */
class GenericTest extends PHPUnit_Framework_TestCase {

  public function test() {

    echo Earth::at(AstroDate::now())->position()->toEquat();


            return;
/*


    $jd1  = AstroDate::parse('2015-11-01')->jd;
    $jd2  = AstroDate::parse('2015-11-02')->jd;
    $step = 0.1;

    for ($jd = $jd1; $jd < $jd2; $jd += $step) {
      $date = AstroDate::jd($jd);
      $eq = Earth::at($date)->observe(new Uranus)->toHoriz();

      echo "\n$date->hour\t{$eq->alt->deg}\t{$eq->az->deg}";
      //echo "\n$date->year\t" . Earth::at($date)->observe(new Mercury);
    }

*/



    $date = AstroDate::parse('2015-Mar-20 22:00:00');





    $jd1  = AstroDate::parse('1900-01-01')->jd;
    $jd2  = AstroDate::parse('2100-01-01')->jd;
    $step = 3652.5;

    for ($jd = $jd1; $jd < $jd2; $jd += $step) {
      $date = AstroDate::jd($jd);
      $e = Earth::at($date)->apparent(new Moon);
      $e1 = Earth::topo($date, Geo::deg(27,-82))->apparent(new Moon);
      echo "\n\t{$e->ra->toAngle()->deg}\t{$e->dec->deg}";
      echo "\n\t{$e1->ra->toAngle()->deg}\t{$e->dec->deg}\n";
    }




    return;
    echo "\n\n" . $date . "\n";

    $earth = Earth::at($date);
    //echo "\n" . $earth->position(new Pluto);
    echo "\n" . $earth->observe(new Pluto);
    echo "\n" . $earth->apparent(new Pluto);

    $tampa = Earth::topo($date, Geo::deg(27, -82));
    //echo "\n" . $tampa->position(new Pluto);
    echo "\n" . $tampa->observe(new Pluto);
    echo "\n" . $tampa->apparent(new Pluto);











    return;
    // Geocentric
    $p2 = Earth::at($date)->observe(new Pluto);

    // Topographic
    $tampa = Earth::topo($date, Geo::deg(27, -82));
    $p1    = $tampa->observe(new Pluto);

    echo "\n$p1\n$p2\n";

    // Geocentric
    $p2 = Earth::at($date)->observe(new Pluto)->apparent();

    // Topographic
    $tampa = Earth::topo($date, Geo::deg(27, -82));
    $p1    = $tampa->observe(new Pluto)->apparent();

    echo "\n$p1\n$p2\n";


    // Geocentric
    $p2 = Earth::at($date)->position(new Pluto);

    // Topographic
    $tampa = Earth::topo($date, Geo::deg(27, -82));
    $p1    = $tampa->position(new Pluto);

    echo "\n$p1\n$p2\n";







    return;
    echo "\n" . Earth::at($date)->position();
    echo "\n\n" . Earth::at($date)->position(new Mercury);
    echo "\n\n" . Earth::at($date)->observe(new Mercury);
    echo "\n\n" . Earth::at($date)->observe(new Mercury);
    echo "\n\n" . Earth::at($date)->observe(new Mercury)->toHoriz(Geo::deg(27,
                    -82));

    // $tampa = Earth::topo(Geo::deg(27, -82));
    //echo $p     = $tampa->observe(new Pluto);
    //$tampa = Earth::at($date)




    return;
    $tampa = Earth::at($date)->topo(Geo::deg(27, -82));






    $centr = Earth::at($date);
    $tampa = Earth::at($date)->topo($geo);
  }

}
